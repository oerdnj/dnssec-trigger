#!/bin/bash
# makepackage
# builds a mac package
# version 201110 cas
# changed for dnssec-trigger, 201110, wouter.

# put installed files in DESTDIR=DEST.
# start in osx/pkg dir with osx/pkg/DEST for distfiles.

PRODUCT="dnssectrigger"
OS=`uname`
DESTDIR=$(pwd)/DEST
VERSION=`grep " PACKAGE_VERSION" ../../config.h | sed -e 's/.*"\(.*\)"/\1/'`

if [[ "$OS" == 'Darwin' ]]; then
   PLATFORM='MacOSX'
   LAYOUT="MAC"
   OSVERSION=`sw_vers -productVersion | cut -d . -f 1,2`
   ARCH=`uname -p`
   if [ -z "${CPUARCH}" ]; then
       CPUARCH="${ARCH}"
   fi
fi

VERSION2=`echo $VERSION | sed s'/[\.\-]//'g`
echo "Preparing binary package for $PLATFORM ${OSVERSION} on ${CPUARCH}"

ORIG="$(pwd)"

macpackage_commands()
{ :

    cd ${DESTDIR}
    rm -f $ORIG/${PRODUCT}-${VERSION}-binary-${CPUARCH}-${OSVERSION}.tar.gz
    rm -rf package-manager
    tar czf $ORIG/${PRODUCT}-${VERSION}-binary-${CPUARCH}-${OSVERSION}.tar.gz .

    # create package manager dir structure
    PKGDIR=`pwd`
    mkdir -p package-manager/${PRODUCT}.pmdoc
    mkdir package-manager/packages
    mkdir -p package-manager/packages/Package_Root/tmp
    mkdir package-manager/packages/Resources

    # write postflight script
    cat <<EOF > package-manager/packages/Resources/postflight
#!/bin/bash
# stop unbound if launch plist exists

if [[ -f /Library/LaunchDaemons/nl.nlnetlabs.unbound.plist ]]; then
    launchctl unload -w /Library/LaunchDaemons/nl.nlnetlabs.unbound.plist
fi

if test -f /Library/LaunchDaemons/nl.nlnetlabs.dnssec-triggerd.plist; then
    launchctl unload -w /Library/LaunchAgents/nl.nlnetlabs.dnssec-trigger-panel.plist
    launchctl unload -w /Library/LaunchDaemons/nl.nlnetlabs.dnssec-trigger-hook.plist
    launchctl unload -w /Library/LaunchDaemons/nl.nlnetlabs.dnssec-triggerd.plist
fi

# stop BIND if launch plist exists
if [[ -f /System/Library/LaunchDaemons/org.isc.named.plist ]]; then
    launchctl unload -w /System/Library/LaunchDaemons/org.isc.named.plist
fi

tar xzC / -f /tmp/${PRODUCT}-${VERSION}-binary-${CPUARCH}-${OSVERSION}.tar.gz

# add unbound user
if [[ "${OSVERSION}" == '10.4' ]]; then
    # Tiger
    dscl / -create /Users/unbound
    dscl / -create /Users/unbound UserShell /bin/nologin
elif [[ "${OSVERSION}" == '10.5' ]]; then
    # Leopard
    dscl localhost -create /Local/Default/Users/unbound
    dscl localhost -create /Local/Default/Users/unbound UserShell /bin/nologin
elif [[ "${OSVERSION}" == '10.6' ]]; then
    # SnowLeopard
    dscl localhost -create /Local/Default/Users/unbound
    dscl localhost -create /Local/Default/Users/unbound UserShell /bin/nologin
elif [[ "${OSVERSION}" == '10.7' ]]; then
    # Lion
    dscl localhost -create /Local/Default/Users/unbound
    dscl localhost -create /Local/Default/Users/unbound UserShell /bin/nologin
fi

# write unbound plist
cat << 'EOF2' > /Library/LaunchDaemons/nl.nlnetlabs.unbound.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>Label</key>
        <string>nl.nlnetlabs.unbound</string>
        <key>ProgramArguments</key>
        <array>
           <string>/usr/sbin/unbound</string>
           <string>-d</string>
        </array>
        <key>RunAtLoad</key>
        <true/>
        <key>OnDemand</key>
        <false/>
</dict>
</plist>
EOF2

# fetch root DNS key
if [[ ! -f /etc/unbound/root.key ]]; then
   /usr/sbin/unbound-anchor
fi

# setup default configuration file and keys
if [[ ! -f /etc/unbound/unbound.conf ]]; then
	cp /etc/unbound/unbound.conf-default /etc/unbound/unbound.conf
	/usr/sbin/unbound-control-setup
	/usr/sbin/dnssec-trigger-control-setup
	/usr/sbin/dnssec-trigger-control-setup -i
fi
if [[ ! -f /etc/dnssec-trigger/dnssec-trigger.conf ]]; then
	cp /etc/dnssec-trigger/dnssec-trigger.conf-default /etc/dnssec-trigger/dnssec-trigger.conf
fi

# clean up
rm -rf /tmp/${PRODUCT}-${VERSION}-binary*

# start unbound
launchctl load -w /Library/LaunchDaemons/nl.nlnetlabs.unbound.plist

# start dnssec-trigger (-panel and -hooks)
launchctl load -w /Library/LaunchDaemons/nl.nlnetlabs.dnssec-triggerd.plist
launchctl load -w /Library/LaunchDaemons/nl.nlnetlabs.dnssec-trigger-hook.plist
launchctl load -w /Library/LaunchAgents/nl.nlnetlabs.dnssec-trigger-panel.plist

EOF

# write the background picture
cp $ORIG/package-bg.png package-manager/packages/Resources/unbound.png

cp $ORIG/${PRODUCT}-${VERSION}-binary-${CPUARCH}-${OSVERSION}.tar.gz package-manager/packages/Package_Root/tmp
cat <<EOF > package-manager/${PRODUCT}.pmdoc/01package.xml
<pkgref spec="1.12" uuid="2F9BC3A8-16DF-486E-9FB0-1B702DA93B5A">
<config>
 <identifier>nl.nlnetlabs${PRODUCT}${VERSION2}ForMacosX${OSVERSION}.Package_Root.pkg</identifier>
 <version>${VERSION}</version>
 <description></description>
 <post-install type="none"/>
 <requireAuthorization/>
 <installFrom>${PKGDIR}/package-manager/packages/Package_Root</installFrom>
 <installTo>/</installTo>
 <flags>
   <followSymbolicLinks/>
 </flags>
 <packageStore type="internal"></packageStore>
 <mod>identifier</mod>
 <mod>version</mod>
 <mod>parent</mod>
</config>
<scripts>
  <postflight mod="true">${PKGDIR}/package-manager/packages/Resources/postflight</postflight>
</scripts>
<contents>
  <file-list>01package-contents.xml</file-list>
  <filter>/CVS$</filter>
  <filter>/\.svn$</filter>
  <filter>/\.cvsignore$</filter>
  <filter>/\.cvspass$</filter>
  <filter>/\.DS_Store$</filter>
</contents>
</pkgref> 
EOF

cat <<EOF > package-manager/${PRODUCT}.pmdoc/01package-contents.xml
<pkg-contents spec="1.12">
  <f n="Package_Root" o="root" g="admin" p="16877" pt="${PKGDIR}/package-manager/packages/Package_Root" m="false" t="file">
    <f n="tmp" o="root" g="admin" p="16877">
      <f n="${PRODUCT}-${VERSION}-binary-${CPUARCH}-${OSVERSION}.tar.gz" o="root" g="admin" p="33188"/>
    </f>
  </f>
</pkg-contents>
EOF


cat <<EOF > package-manager/${PRODUCT}.pmdoc/index.xml
<pkmkdoc spec="1.12">
	<properties>
		<title>NLnet Labs Unbound ${VERSION} for MacOS X ${OSVERSION}</title>
		<build>$(pwd)/NLnet Labs Unbound ${VERSION} for MacOS X.mpkg</build>
		<organization>nl.nlnetlabs</organization>
		<userSees ui="both"/>
		<min-target os="2"/>
		<domain system="true"/>
	</properties>
	<distribution>
		<versions min-spec="1.000000"/>
		<scripts></scripts>
	</distribution>
	<description>
Unbound is a validating, recursive, and caching DNS resolver.

The C implementation of Unbound is developed and maintained by NLnet Labs. It is based on ideas and algorithms taken from a java prototype developed by Verisign labs, Nominet, Kirei and ep.net.

Unbound is designed as a set of modular components, so that also DNSSEC (secure DNS) validation and stub-resolvers (that do not run as a server, but are linked into an application) are easily possible.

The source code is under a BSD License.
	</description>
	<contents>
		<choice title="Package_Root" id="choice1" starts_selected="true" starts_enabled="true" starts_hidden="false">
			<pkgref id="nl.nlnetlabs${PRODUCT}${VERSION2}ForMacosX${OSVERSION}.Package_Root.pkg"/>
		</choice>
	</contents>
	<resources bg-scale="none" bg-align="topleft">
		<locale lang="en">
      		<resource mod="true" type="background">${PKGDIR}/package-manager/packages/Resources/unbound.png</resource>
			<resource mime-type="text/rtf" kind="embedded" type="license"><![CDATA[{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 Copyright (c) 2007, NLnet Labs. All rights reserved.\\
\\
This software is open source.\\
\\
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:\\
\\
Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.\\
\\
Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.\\
\\
Neither the name of the NLNET LABS nor the names of its contributors may
be used to endorse or promote products derived from this software without
specific prior written permission.\\
\\
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.}]]></resource>
<resource mime-type="text/rtf" kind="embedded" type="readme"><![CDATA[{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs26 \cf0 This installs Unbound ${VERSION} for MacOS X ${OSVERSION} (${CPUARCH}). \\
\\
Unbound is a validating, recursive, and caching DNS resolver.\\
\\
The C implementation of Unbound is developed and maintained by NLnet Labs. It is based on ideas and algorithms taken from a java prototype developed by Verisign labs, Nominet, Kirei and ep.net.\\
\\
Unbound is designed as a set of modular components, so that also DNSSEC (secure DNS) validation and stub-resolvers (that do not run as a server, but are linked into an application) are easily possible.\\
\\
The source code is under a BSD License.\\
\\
Information about Unbound can be found at \\
http://unbound.net}]]></resource><resource mime-type="text/rtf" kind="embedded" type="welcome"><![CDATA[{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 LucidaGrande;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs26 \cf0 Welcome to the Unbound for MacOS X installer.\\
\\
The Unbound installer will install the Unbound validating DNS server on this system.  It will install a default configuration file in 
\f1 /etc/unbound/unbound.conf
\f0  if no existing configuration file is found.\\
\\
The trust anchor for the Internet root zone will be downloaded using '
\f1 unbound-anchor
\f0 ' if the file 
\f1 /etc/unbound/root.key
\f0  does not exist.\\
\\
To use the locally installed Unbound DNS server, change the DNS server configuration in the network settings to point to your local machine (IPv4 loopback:127.0.0.1 or IPv6 loopback ::1).\\
\\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 This installer will disable the BIND DNS Server on this system!\\
}]]>
	</resource>
	</locale>
	</resources>
	<requirements>
		<requirement id="filt" operator="eq" value="true">
			<file>/usr/bin/openssl</file>
			<message>Unbound requires OpenSSL to be installed</message>
		</requirement>
	</requirements>
	<flags/>
	<item type="file">01package.xml</item>
	<mod>properties.title</mod>
	<mod>properties.customizeOption</mod>
	<mod>description</mod>
	<mod>properties.anywhereDomain</mod>
	<mod>properties.systemDomain</mod>
</pkmkdoc>
EOF

# build package
/Developer/Applications/Utilities/PackageMaker.app/Contents/MacOS/PackageMaker --doc package-manager/${PRODUCT}.pmdoc
rm -rf ../${PRODUCT}-${VERSION}-${CPUARCH}-${OSVERSION}.mpkg
mv ${PRODUCT}.mpkg ../${PRODUCT}-${VERSION}-${CPUARCH}-${OSVERSION}.mpkg
#rm -f ../${PRODUCT}-${VERSION}-${CPUARCH}-${OSVERSION}.zip
#zip -r ../${PRODUCT}-${VERSION}-${CPUARCH}-${OSVERSION}.zip ../${PRODUCT}-${VERSION}-${CPUARCH}-${OSVERSION}.mpkg

# create DMG
rm -f ../${PRODUCT}-${VERSION}-${CPUARCH}-${OSVERSION}.dmg pack.dmg
cp $ORIG/dmg-template.dmg.gz pack.dmg.gz
gzip -d pack.dmg.gz
hdiline=`hdiutil attach -readwrite "pack.dmg" | egrep '^/dev/' | sed 1q `
device=`echo $hdiline | awk '{print $1}' `
hdimnt=`echo $hdiline | sed -e 'sX^.*/VolumesX/VolumesX' `
echo "hdiutil attach to device ${device} at ${hdimnt}"
sleep 5
sync
rm -rf "$hdimnt"/*.mpkg
cp -R ../${PRODUCT}-${VERSION}-${CPUARCH}-${OSVERSION}.mpkg "$hdimnt"
sleep 5
sync
hdiutil detach ${device}
sync
sleep 5
sync
hdiutil convert "pack.dmg" -format UDZO -imagekey zlib-level=9 -o "../${PRODUCT}-${VERSION}-${CPUARCH}-${OSVERSION}.dmg"
rm pack.dmg

}

test_pipe()
{
    for i in "${PIPESTATUS[@]}"
    do
        [ $i == 0 ] || { echo FAILED! ; exit 1 ; }
    done
    echo successful!
    return 0
}

go()
{
    { ${1}_commands 3>&1 1>&2 2>&3 | \
        tee "$ORIG/${VERSION}-logs/${1}.err" ;} \
        &>"$ORIG/${VERSION}-logs/${1}.log"
    test_pipe || exit 1
};

# Here we go:
#mkdir -p $ORIG/${VERSION}-logs
#echo -n "MacOS X Packaging... "  && go macpackage      || exit 7
macpackage_commands || exit 7

# All done

