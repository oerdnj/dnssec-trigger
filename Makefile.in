# Copyright 2007 NLnet Labs
# See the file LICENSE for the license

debug_enabled=@debug_enabled@
ifeq "$(QUIET)" ""
ifeq ($(debug_enabled),yes)
  QUIET=yes
else
  QUIET=no
endif
endif

ifeq "$(QUIET)" "yes"
  Q=@
  INFO=@echo
else
  Q=
  INFO=@:
endif

SHELL=@SHELL@
VERSION=@PACKAGE_VERSION@
srcdir=@srcdir@
prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
sbindir=@sbindir@
mandir=@mandir@
libdir=@libdir@
libexecdir=@libexecdir@
# datarootdir is here to please some checkers, use datadir.
datarootdir=@datarootdir@
datadir=@datadir@
includedir=@includedir@
ldnsdir=@ldnsdir@
EXEEXT=@EXEEXT@
hooks=@hooks@
makehook=@hooks@-hook
installhook=@hooks@-hook-install
uninstallhook=@hooks@-hook-uninstall
networkmanager_dispatcher_dir=@networkmanager_dispatcher_dir@
netconfig_dispatcher_dir=@netconfig_dispatcher_dir@
osx_launchagents_dir=/Library/LaunchAgents
osx_launchdaemons_dir=/Library/LaunchDaemons
configfile=@configfile@
keydir=@keydir@
uidir=@uidir@
pidfile=@pidfile@

# override $U variable which is used by autotools for deansification (for
# K&R C compilers), but causes problems if $U is defined in the env).
U=

YACC=@YACC@
LEX=@LEX@
STRIP=@STRIP@
CC=@CC@
CPPFLAGS=-I. @CPPFLAGS@
ifneq "$(srcdir)" "."
  CPPFLAGS:=-I$(srcdir) $(CPPFLAGS)
endif
CPPFLAGS:=$(strip $(CPPFLAGS))
GTK_CFLAGS=@GTK_CFLAGS@
CFLAGS=@CFLAGS@ $(GTK_CFLAGS)
LDFLAGS=@LDFLAGS@
GTK_LIBS=@GTK_LIBS@
LDNSLIBS=@LDNSLIBS@
LIBS=$(strip @LIBS@)
LIBOBJS=@LIBOBJS@
RUNTIME_PATH=@RUNTIME_PATH@
DEPFLAG=@DEPFLAG@
EXPORT_DYNAMIC=@EXPORT_DYNAMIC@
DATE=$(shell date +%Y%m%d)
BUILD=build/

WINDRES=@WINDRES@
LINT=splint
LINTFLAGS=+quiet -weak -warnposix -unrecog -Din_addr_t=uint32_t -Du_int=unsigned -Du_char=uint8_t -preproc -Drlimit=rlimit64 -D__gnuc_va_list=va_list
#-Dglob64=glob -Dglobfree64=globfree
# compat with openssl linux edition.
LINTFLAGS+="-DBN_ULONG=unsigned long" -Dkrb5_int32=int "-Dkrb5_ui_4=unsigned int" -DPQ_64BIT=uint64_t -DRC4_INT=unsigned -fixedformalarray -D"ENGINE=unsigned" -D"RSA=unsigned" -D"DSA=unsigned" -D"EVP_PKEY=unsigned" -D"EVP_MD=unsigned" -D"SSL=unsigned" -D"SSL_CTX=unsigned" -D"X509=unsigned" -D"RC4_KEY=unsigned" -D"EVP_MD_CTX=unsigned"
# compat with NetBSD
ifeq "$(shell uname)" "NetBSD"
LINTFLAGS+="-D__RENAME(x)=" -D_NETINET_IN_H_
endif
# compat with OpenBSD
LINTFLAGS+="-Dsigset_t=long"
# FreeBSD8
LINTFLAGS+="-D__uint16_t=uint16_t"

INSTALL=$(srcdir)/install-sh

COMMON_SRC=
COMMON_OBJ=$(addprefix $(BUILD),$(COMMON_SRC:.c=.o))
COMPAT_SRC=$(addprefix compat/,$(LIBOBJS:.o=.c))
COMPAT_OBJ=$(addprefix $(BUILD)compat/,$(LIBOBJS:.o=.o))

PANEL_SRC=panel/panel.c panel/attach.c riggerd/cfg.c riggerd/log.c riggerd/net_help.c
PANEL_OBJ=$(addprefix $(BUILD),$(PANEL_SRC:.c=.o)) $(COMPAT_OBJ)
CONTROL_SRC=dnssec-trigger-control.c riggerd/cfg.c riggerd/log.c riggerd/net_help.c
CONTROL_OBJ=$(addprefix $(BUILD),$(CONTROL_SRC:.c=.o)) $(COMPAT_OBJ)
RIGGERD_SRC=riggerd/riggerd.c riggerd/log.c riggerd/netevent.c riggerd/rbtree.c riggerd/mini_event.c riggerd/net_help.c riggerd/winsock_event.c riggerd/fptr_wlist.c riggerd/cfg.c riggerd/svr.c riggerd/probe.c riggerd/ubhook.c riggerd/reshook.c
RIGGERD_OBJ=$(addprefix $(BUILD),$(RIGGERD_SRC:.c=.o)) $(COMPAT_OBJ)

ALL_SRC=$(sort $(COMMON_SRC) $(PANEL_SRC) $(RIGGERD_SRC) $(CONTROL_SRC))
ALL_OBJ=$(addprefix $(BUILD),$(ALL_SRC:.c=.o) \
	$(addprefix compat/,$(LIBOBJS:.o=.o))) $(COMPAT_OBJ)

COMPILE=$(CC) $(CPPFLAGS) $(CFLAGS)
LINK=$(strip $(CC) $(RUNTIME_PATH) $(CFLAGS) $(LDFLAGS))

.PHONY:	clean realclean doc lint all install uninstall test strip 

$(BUILD)%.o:    $(srcdir)/%.c 
	$(INFO) Build $<
	@-if test ! -d $(dir $@); then $(INSTALL) -d $(patsubst %/,%,$(dir $@)); fi
	$Q$(COMPILE) -o $@ -c $<

all:	$(COMMON_OBJ) dnssec-triggerd$(EXEEXT) dnssec-trigger-panel$(EXEEXT) dnssec-trigger-control-setup dnssec-trigger-control$(EXEEXT) $(makehook) example.conf

test:	
	@echo done

example.conf:	example.conf.in
	rm -f $@
	sed -e 's?0VERSION?$(VERSION)?' -e 's?0keydir0?$(keydir)?' -e 's?0pidfile0?$(pidfile)?' < example.conf.in > $@

dnssec-trigger-control-setup:	dnssec-trigger-control-setup.sh.in
	rm -f $@
	sed -e 's?0SHELL0?$(SHELL)?' -e 's?0keydir0?$(keydir)?' -e 's?0configfile0?$(configfile)?' < dnssec-trigger-control-setup.sh.in > $@
	chmod +x $@

none-hook:
	echo "no dhcp hooks available, need trigger script"

windows-hook:
	echo "TODO compile windows hooks"

networkmanager-hook:	01-dnssec-trigger-hook

01-dnssec-trigger-hook:	01-dnssec-trigger-hook.sh.in
	rm -f $@
	sed -e 's?0SHELL0?$(SHELL)?' < 01-dnssec-trigger-hook.sh.in > $@
	chmod +x $@

osx-hook:	dnssec-trigger-hook.plist dnssec-trigger-osx.sh

dnssec-trigger-hook.plist:	dnssec-trigger-hook.plist.in
	rm -f $@
	sed -e 's?0libexecdir0?$(libexecdir)?' < dnssec-trigger-hook.plist.in > $@

dnssec-trigger-osx.sh:	dnssec-trigger-osx.sh.in
	rm -f $@
	sed -e 's?0SHELL0?$(SHELL)?' < dnssec-trigger-osx.sh.in > $@
	chmod +x $@

netconfig-hook:	dnssec-trigger-netconfig-hook

dnssec-trigger-netconfig-hook:	dnssec-trigger-netconfig-hook.sh.in
	rm -f $@
	sed -e 's?0SHELL0?$(SHELL)?' < dnssec-trigger-netconfig-hook.sh.in > $@
	chmod +x $@

dnssec-triggerd$(EXEEXT):	$(RIGGERD_OBJ)
	$(INFO) Link $@
	$Q$(LINK) -o $@ $(sort $(RIGGERD_OBJ)) $(LDNSLIBS) $(LIBS)

dnssec-trigger-control$(EXEEXT):	$(CONTROL_OBJ)
	$(INFO) Link $@
	$Q$(LINK) -o $@ $(sort $(CONTROL_OBJ)) $(LIBS)

dnssec-trigger-panel$(EXEEXT):	$(PANEL_OBJ)
	$(INFO) Link $@
	$Q$(LINK) $(EXPORT_DYNAMIC) -o $@ $(sort $(PANEL_OBJ)) $(LIBS) $(GTK_LIBS)

util/config_file.c:	util/configparser.h
util/configlexer.c:  $(srcdir)/util/configlexer.lex util/configparser.h
	$(INFO) Lex $<
ifeq "$(strip $(LEX))" ":"
	$Qecho "rebuild lexer, but no lex program, skipped"
else
	@-if test ! -d util; then $(INSTALL) -d util; fi
	$Qecho "#include \"config.h\"" > $@
	$Qecho "#include \"util/configyyrename.h\"" >> $@
	$Q$(LEX) -t $< >> $@
endif

util/configparser.c util/configparser.h:  $(srcdir)/util/configparser.y
	$(INFO) Yacc $<
	@-if test ! -d util; then $(INSTALL) -d util; fi
	$Q$(YACC) -d -o util/configparser.c $<

clean:
	rm -f *.o *.d *.lo *~ tags
	rm -f dnssec-trigger-panel$(EXEEXT) dnssec-triggerd$(EXEEXT)
	rm -f dnssec-trigger-control-setup dnssec-trigger-control$(EXEEXT)
	rm -f 01-dnssec-trigger-hook dnssec-trigger-osx.sh dnssec-trigger-hook.plist dnssec-trigger-netconfig-hook example.conf
	rm -rf autom4te.cache build

realclean: clean
	rm -f config.status config.log config.h.in config.h
	rm -f util/configlexer.c util/configparser.c util/configparser.h
	rm -f Makefile configure

$(BUILD)%.lint:    $(srcdir)/%.c 
	$(INFO) Lint $<
	@-if test ! -d $(dir $@); then $(INSTALL) -d $(patsubst %/,%,$(dir $@)); fi
	$Q$(LINT) $(LINTFLAGS) -I. -I$(srcdir) -I$(ldnsdir)/include $<
	$Qtouch $@

lint:	$(addprefix $(BUILD),$(filter-out panel/attach.lint,$(filter-out panel/panel.lint,$(filter-out util/configparser.lint,$(filter-out util/configlexer.lint,$(sort $(ALL_SRC:.c=.lint)))))))

tags:	$(srcdir)/*.[ch] $(srcdir)/*/*.[ch]
	ctags  -f $(srcdir)/tags $(srcdir)/*.[ch] $(srcdir)/*/*.[ch]

strip:
	$(STRIP) dnssec-trigger-panel$(EXEEXT)
	$(STRIP) dnssec-triggerd$(EXEEXT)
	$(STRIP) dnssec-trigger-control$(EXEEXT)

none-hook-install:
	echo "no hook to install"

none-hook-uninstall:
	echo "no hook to uninstall"

windows-hook-install:
	echo "TODO windows hook install"

windows-hook-uninstall:
	echo "TODO windows hook uninstall"

networkmanager-hook-install:
	$(INSTALL) -m 755 -d $(DESTDIR)$(networkmanager_dispatcher_dir)
	$(INSTALL) -c -m 755 01-dnssec-trigger-hook $(DESTDIR)$(networkmanager_dispatcher_dir)/01-dnssec-trigger-hook

networkmanager-hook-uninstall:
	rm -f -- $(DESTDIR)$(networkmanager_dispatcher_dir)/01-dnssec-trigger-hook

osx-hook-install:
	$(INSTALL) -m 755 -d $(DESTDIR)$(osx_launchagents_dir)
	$(INSTALL) -m 755 -d $(DESTDIR)$(osx_launchdaemons_dir)
	$(INSTALL) -m 755 -d $(DESTDIR)$(libexecdir)
	$(INSTALL) -c -m 644 dnssec-trigger-hook.plist $(DESTDIR)$(osx_launchagents_dir)/dnssec-trigger-hook.plist
	$(INSTALL) -c -m 755 dnssec-trigger-osx.sh $(DESTDIR)$(libexecdir)/dnssec-trigger-osx.sh
	$(INSTALL) -c -m 644 dnssec-triggerd.plist $(DESTDIR)$(osx_launchdaemons_dir)/dnssec-triggerd.plist
	if test "`uname -r | cut -d . -f 1`" -lt 9; then \
		echo "install the panel to launch for the user, goes into Library/Preferences/com.apple.loginwindow.plist." ; \
		defaults write loginwindow AutoLaunchedApplicationDictionary -array-add "<dict><key>Hide</key><false/><key>Path</key><string>$(DESTDIR)$(sbindir)/dnssec-trigger-panel$(EXEEXT)</string></dict>" ; \
	else \
		echo "install panel in osx 10.5 and later mode" ; \
		$(INSTALL) -c -m 644 dnssec-trigger-panel.plist $(DESTDIR)$(osx_launchagents_dir)/dnssec-trigger-panel.plist ; \
	fi

osx-hook-uninstall:
	rm -f -- $(DESTDIR)$(osx_launchagents_dir)/dnssec-trigger-hook.plist
	rm -f -- $(DESTDIR)$(libexecdir)/dnssec-trigger-osx.sh
	rm -f -- $(DESTDIR)$(osx_launchdaemons_dir)/dnssec-triggerd.plist
	rm -f -- $(DESTDIR)$(osx_launchagents_dir)/dnssec-trigger-panel.plist
	if test "`uname -r | cut -d . -f 1`" -lt 9; then \
		echo "there is no way to delete dnssec-trigger-panel from Library/Preferences/com.apple.loginwindow.plist with the defaults tool." ; \
		echo "you have to manually remove it (from the accounts-LoginItems controlpanel pane)" ; \
	fi

netconfig-hook-install:
	$(INSTALL) -m 755 -d $(DESTDIR)$(netconfig_dispatcher_dir)
	$(INSTALL) -c -m 755 dnssec-trigger-netconfig-hook $(DESTDIR)$(netconfig_dispatcher_dir)/dnssec-trigger-netconfig-hook

netconfig-hook-uninstall:
	rm -f -- $(DESTDIR)$(netconfig_dispatcher_dir)/dnssec-trigger-netconfig-hook

install:	all $(installhook)
	$(INSTALL) -m 755 -d $(DESTDIR)$(sbindir)
	$(INSTALL) -m 755 -d $(DESTDIR)$(mandir)
	$(INSTALL) -m 755 -d $(DESTDIR)$(mandir)/man8
	$(INSTALL) -m 755 -d $(DESTDIR)$(keydir)
	$(INSTALL) -m 755 -d $(DESTDIR)$(uidir)
	-$(INSTALL) -m 755 -d "`dirname $(DESTDIR)$(pidfile)`"
	$(INSTALL) -c -m 644 panel/pui.xml $(DESTDIR)$(uidir)/pui.xml
	$(INSTALL) -c -m 644 panel/status-icon.png $(DESTDIR)$(uidir)/status-icon.png
	$(INSTALL) -c -m 644 panel/status-icon-alert.png $(DESTDIR)$(uidir)/status-icon-alert.png
	$(INSTALL) -c -m 755 dnssec-trigger-panel$(EXEEXT) $(DESTDIR)$(sbindir)/dnssec-trigger-panel$(EXEEXT)
	$(INSTALL) -c -m 755 dnssec-trigger-control-setup $(DESTDIR)$(sbindir)/dnssec-trigger-control-setup
	$(INSTALL) -c -m 755 dnssec-trigger-control$(EXEEXT) $(DESTDIR)$(sbindir)/dnssec-trigger-control$(EXEEXT)
	$(INSTALL) -c -m 755 dnssec-triggerd$(EXEEXT) $(DESTDIR)$(sbindir)/dnssec-triggerd$(EXEEXT)
	if test ! -f $(DESTDIR)$(configfile); then \
		$(INSTALL) -c -m 644 example.conf $(DESTDIR)$(configfile); fi

uninstall: $(uninstallhook)
	rm -f -- $(DESTDIR)$(sbindir)/dnssec-trigger-panel$(EXEEXT)
	rm -f -- $(DESTDIR)$(sbindir)/dnssec-trigger-control-setup
	rm -f -- $(DESTDIR)$(sbindir)/dnssec-trigger-control$(EXEEXT)
	rm -f -- $(DESTDIR)$(sbindir)/dnssec-triggerd$(EXEEXT)
	rm -f -- $(DESTDIR)$(uidir)/pui.xml
	rm -f -- $(DESTDIR)$(uidir)/status-icon.png
	rm -f -- $(DESTDIR)$(uidir)/status-icon-alert.png
	chmod 644 /etc/resolv.conf
	@echo
	@echo "You still need to remove ssl keys from $(DESTDIR)$(keydir) and $(DESTDIR)$(configfile) by hand"

# Automatic dependencies.
$(BUILD)%.d: $(srcdir)/%.c
	$(INFO) Depend $<
	@-if test ! -d $(dir $@); then $(INSTALL) -d $(patsubst %/,%,$(dir $@)); fi
	$Q$(SHELL) -ec '$(CC) $(DEPFLAG) $(CPPFLAGS) $(CFLAGS) $< | sed '\''s!\(.*\)\.o[ :]*!$(dir $@)\1.o $@ : !g'\'' > $@; [ -s $@ ] || rm -f $@'

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),realclean)
ifeq ($(debug_enabled),yes)
-include $(addprefix $(BUILD),$(ALL_SRC:.c=.d) $(COMPAT_SRC:.c=.d))
endif
endif
endif
